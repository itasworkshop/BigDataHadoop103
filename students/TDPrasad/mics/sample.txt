SCALA ASSAIGNMENT

BY T DURGA PRASAD

build.gradle(black_queen)

plugins {
    id 'scala'
    id 'java'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.scala-lang:scala-library:2.12.10'
    implementation group: 'org.apache.spark', name: 'spark-core_2.12', version: '3.1.1'
    implementation group: 'org.apache.spark', name: 'spark-sql_2.12', version: '3.1.1'

}

jar {
    manifest {
        attributes 'Main-Class': 'blackqvn'
    }
}

test {
    useJUnitPlatform()
}

SCALA_PROGRAME_



import org.apache.spark.sql.SparkSession
object testbcards {
  def main(args:Array[String]): Unit ={


    val session = SparkSession.builder()
      .appName( name = "blackqvn")
      .config("spark.master","local")
      .getOrCreate()

    val sc = session.sparkContext

    val cards = sc.textFile( path = "file: D:\\prassadh\\Assaignments_CryptoTech\\BigDataHadoop103\\sample_data")
    val colour_symb = data.map(x => (x.split("\\|")(0),x.split("\\|")(2)))

    val key_value = colour_symb.map(x => (x,1))

    val count_clr_sym = key_value.reduceByKey((a,b) => (a+b))
    
    count_clr_sym.collect()
  }
}



Q) Grading


object marks extends App {
  println("Enter the student marks: ");

  val marks:Int = scala.io.StdIn.readInt();
  if (marks >= 90 && marks <= 100)
  {
    println("The student got Grade A")
  }
  else if (marks >= 80 && marks < 90)
  {
    println("The student got Grade B")
  }
  else if (marks >= 70 && marks < 80)
  {
    println("The student got Grade C")
  }
  else
  {
    println("The student is Failed")
  }
}


PERSENTAGE STUDENTS

class MaxAvg (id:Int, name:String, cmarks:Int, pmarks:Int, mmarks:Int) {

    def result(){
      var total:Int = this.cmarks + this.pmarks + this.mmarks;
      var avg:Double = ((total.toDouble)./(300:Float))*100;
      var out_put = avg.round;



      println("id: " + this.id + " per:"+out_put);
      println();

    }

  }

  object class_data {

    def main(args:Array[String]){

      var m1 = new MaxAvg(id = 101, name = "Janu", cmarks = 45, pmarks = 55, mmarks = 67);
      m1.result();

      var m2 = new MaxAvg(id = 102, name = "Sannu", cmarks = 55, pmarks = 71, mmarks = 81);
      m2.result();

      var m3 = new MaxAvg(id = 103, name = "Pannu", cmarks = 65, pmarks = 76, mmarks = 70);
      m3.result();


    }

    }
